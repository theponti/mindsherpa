/** THIS FILE IS AUTOGENERATED, DO NOT EDIT IT! */
import { cacheExchange } from '@urql/exchange-graphcache';
import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Upload: { input: any; output: any; }
};

export type Action = {
  readonly __typename?: 'Action';
  readonly goalId: Maybe<Scalars['String']['output']>;
  readonly metadata: Maybe<ActionMetadata>;
  readonly sentiment: Maybe<Scalars['String']['output']>;
  readonly type: Maybe<Scalars['String']['output']>;
  readonly value: Maybe<Scalars['String']['output']>;
};

export type ActionMetadata = {
  readonly __typename?: 'ActionMetadata';
  readonly belief: Maybe<Scalars['String']['output']>;
  readonly currentExpenses: Maybe<Scalars['String']['output']>;
  readonly goalTimeframe: Maybe<Scalars['String']['output']>;
  readonly location: Maybe<Scalars['String']['output']>;
  readonly timeframe: Maybe<Scalars['String']['output']>;
};

export type AuthPayload = {
  readonly __typename?: 'AuthPayload';
  readonly accessToken: Scalars['String']['output'];
  readonly refreshToken: Scalars['String']['output'];
  readonly userId: Scalars['Int']['output'];
};

export type Belief = {
  readonly __typename?: 'Belief';
  readonly sentiment: Maybe<Scalars['String']['output']>;
  readonly type: Maybe<Scalars['String']['output']>;
  readonly value: Maybe<Scalars['String']['output']>;
};

export type Chat = {
  readonly __typename?: 'Chat';
  readonly createdAt: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
};

export type CreateNote = {
  readonly __typename?: 'CreateNote';
  readonly content: Scalars['String']['output'];
  readonly createdAt: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
};

export type CreateNoteInput = {
  readonly content: Scalars['String']['input'];
};

export type CreateUserInput = {
  readonly email: Scalars['String']['input'];
};

export type CreateUserPayload = {
  readonly __typename?: 'CreateUserPayload';
  readonly profile: Profile;
  readonly user: User;
};

export type Date = {
  readonly __typename?: 'Date';
  readonly action: Maybe<Scalars['String']['output']>;
  readonly type: Maybe<Scalars['String']['output']>;
  readonly value: Maybe<Scalars['String']['output']>;
};

export type Focus = {
  readonly __typename?: 'Focus';
  readonly actions: ReadonlyArray<Action>;
  readonly beliefs: ReadonlyArray<Belief>;
  readonly dates: ReadonlyArray<Date>;
  readonly goals: ReadonlyArray<Goal>;
  readonly locations: ReadonlyArray<Location>;
  readonly preferences: ReadonlyArray<Preference>;
  readonly vision: Maybe<Scalars['String']['output']>;
};

export type GetProfileOutput = {
  readonly __typename?: 'GetProfileOutput';
  readonly fullName: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly userId: Scalars['String']['output'];
};

export type Goal = {
  readonly __typename?: 'Goal';
  readonly goalId: Scalars['String']['output'];
  readonly priorityGrade: Scalars['Int']['output'];
  readonly sentiment: Scalars['String']['output'];
  readonly value: Scalars['String']['output'];
};

export type Location = {
  readonly __typename?: 'Location';
  readonly country: Maybe<Scalars['String']['output']>;
  readonly locationType: Maybe<Scalars['String']['output']>;
  readonly type: Maybe<Scalars['String']['output']>;
  readonly value: Maybe<Scalars['String']['output']>;
};

export type Message = {
  readonly __typename?: 'Message';
  readonly chatId: Scalars['String']['output'];
  readonly createdAt: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly message: Scalars['String']['output'];
  readonly profileId: Scalars['String']['output'];
  readonly role: MessageRole;
};

export enum MessageRole {
  Assistant = 'ASSISTANT',
  User = 'USER'
}

export type Mutation = {
  readonly __typename?: 'Mutation';
  readonly createNote: CreateNote;
  readonly createUser: CreateUserPayload;
  readonly refreshToken: AuthPayload;
  readonly saveAppleUser: AuthPayload;
  readonly sendChatMessage: ReadonlyArray<Message>;
  readonly signUpWithEmail: CreateUserPayload;
  readonly updateProfile: UpdateProfilePayload;
  readonly uploadVoiceNote: UploadVoiceNoteResponse;
};


export type MutationCreateNoteArgs = {
  input: CreateNoteInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationRefreshTokenArgs = {
  refreshToken: Scalars['String']['input'];
};


export type MutationSaveAppleUserArgs = {
  idToken: Scalars['String']['input'];
  nonce: Scalars['String']['input'];
};


export type MutationSendChatMessageArgs = {
  chatId: Scalars['String']['input'];
  message: Scalars['String']['input'];
};


export type MutationSignUpWithEmailArgs = {
  email: Scalars['String']['input'];
};


export type MutationUpdateProfileArgs = {
  input: UpdateProfileInput;
};


export type MutationUploadVoiceNoteArgs = {
  audioFile: Scalars['Upload']['input'];
  chatId: Scalars['Int']['input'];
};

export type NoteOutput = {
  readonly __typename?: 'NoteOutput';
  readonly content: Scalars['String']['output'];
  readonly createdAt: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
};

export type Preference = {
  readonly __typename?: 'Preference';
  readonly sentiment: Maybe<Scalars['String']['output']>;
  readonly type: Maybe<Scalars['String']['output']>;
  readonly value: Maybe<Scalars['String']['output']>;
};

export type Profile = {
  readonly __typename?: 'Profile';
  readonly fullName: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly userId: Scalars['String']['output'];
};

export type Query = {
  readonly __typename?: 'Query';
  readonly chatMessages: ReadonlyArray<Message>;
  readonly chats: ReadonlyArray<Chat>;
  readonly currentUser: User;
  readonly focus: Focus;
  readonly notes: ReadonlyArray<NoteOutput>;
  readonly profile: GetProfileOutput;
};


export type QueryChatMessagesArgs = {
  chatId: Scalars['String']['input'];
};

export type UpdateProfileInput = {
  readonly fullName: Scalars['String']['input'];
  readonly userId: Scalars['String']['input'];
};

export type UpdateProfilePayload = {
  readonly __typename?: 'UpdateProfilePayload';
  readonly profile: Profile;
};

export type UploadVoiceNoteResponse = {
  readonly __typename?: 'UploadVoiceNoteResponse';
  readonly error: Maybe<Scalars['String']['output']>;
  readonly text: Maybe<Scalars['String']['output']>;
};

export type User = {
  readonly __typename?: 'User';
  readonly email: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
};

export type WithTypename<T extends { __typename?: any }> = Partial<T> & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Action?: (data: WithTypename<Action>) => null | string,
  ActionMetadata?: (data: WithTypename<ActionMetadata>) => null | string,
  AuthPayload?: (data: WithTypename<AuthPayload>) => null | string,
  Belief?: (data: WithTypename<Belief>) => null | string,
  Chat?: (data: WithTypename<Chat>) => null | string,
  CreateNote?: (data: WithTypename<CreateNote>) => null | string,
  CreateUserPayload?: (data: WithTypename<CreateUserPayload>) => null | string,
  Date?: (data: WithTypename<Date>) => null | string,
  Focus?: (data: WithTypename<Focus>) => null | string,
  GetProfileOutput?: (data: WithTypename<GetProfileOutput>) => null | string,
  Goal?: (data: WithTypename<Goal>) => null | string,
  Location?: (data: WithTypename<Location>) => null | string,
  Message?: (data: WithTypename<Message>) => null | string,
  NoteOutput?: (data: WithTypename<NoteOutput>) => null | string,
  Preference?: (data: WithTypename<Preference>) => null | string,
  Profile?: (data: WithTypename<Profile>) => null | string,
  UpdateProfilePayload?: (data: WithTypename<UpdateProfilePayload>) => null | string,
  UploadVoiceNoteResponse?: (data: WithTypename<UploadVoiceNoteResponse>) => null | string,
  User?: (data: WithTypename<User>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    chatMessages?: GraphCacheResolver<WithTypename<Query>, QueryChatMessagesArgs, Array<WithTypename<Message> | string>>,
    chats?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, Array<WithTypename<Chat> | string>>,
    currentUser?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, WithTypename<User> | string>,
    focus?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, WithTypename<Focus> | string>,
    notes?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, Array<WithTypename<NoteOutput> | string>>,
    profile?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, WithTypename<GetProfileOutput> | string>
  },
  Action?: {
    goalId?: GraphCacheResolver<WithTypename<Action>, Record<string, never>, Scalars['String'] | string>,
    metadata?: GraphCacheResolver<WithTypename<Action>, Record<string, never>, WithTypename<ActionMetadata> | string>,
    sentiment?: GraphCacheResolver<WithTypename<Action>, Record<string, never>, Scalars['String'] | string>,
    type?: GraphCacheResolver<WithTypename<Action>, Record<string, never>, Scalars['String'] | string>,
    value?: GraphCacheResolver<WithTypename<Action>, Record<string, never>, Scalars['String'] | string>
  },
  ActionMetadata?: {
    belief?: GraphCacheResolver<WithTypename<ActionMetadata>, Record<string, never>, Scalars['String'] | string>,
    currentExpenses?: GraphCacheResolver<WithTypename<ActionMetadata>, Record<string, never>, Scalars['String'] | string>,
    goalTimeframe?: GraphCacheResolver<WithTypename<ActionMetadata>, Record<string, never>, Scalars['String'] | string>,
    location?: GraphCacheResolver<WithTypename<ActionMetadata>, Record<string, never>, Scalars['String'] | string>,
    timeframe?: GraphCacheResolver<WithTypename<ActionMetadata>, Record<string, never>, Scalars['String'] | string>
  },
  AuthPayload?: {
    accessToken?: GraphCacheResolver<WithTypename<AuthPayload>, Record<string, never>, Scalars['String'] | string>,
    refreshToken?: GraphCacheResolver<WithTypename<AuthPayload>, Record<string, never>, Scalars['String'] | string>,
    userId?: GraphCacheResolver<WithTypename<AuthPayload>, Record<string, never>, Scalars['Int'] | string>
  },
  Belief?: {
    sentiment?: GraphCacheResolver<WithTypename<Belief>, Record<string, never>, Scalars['String'] | string>,
    type?: GraphCacheResolver<WithTypename<Belief>, Record<string, never>, Scalars['String'] | string>,
    value?: GraphCacheResolver<WithTypename<Belief>, Record<string, never>, Scalars['String'] | string>
  },
  Chat?: {
    createdAt?: GraphCacheResolver<WithTypename<Chat>, Record<string, never>, Scalars['String'] | string>,
    id?: GraphCacheResolver<WithTypename<Chat>, Record<string, never>, Scalars['String'] | string>,
    title?: GraphCacheResolver<WithTypename<Chat>, Record<string, never>, Scalars['String'] | string>
  },
  CreateNote?: {
    content?: GraphCacheResolver<WithTypename<CreateNote>, Record<string, never>, Scalars['String'] | string>,
    createdAt?: GraphCacheResolver<WithTypename<CreateNote>, Record<string, never>, Scalars['String'] | string>,
    id?: GraphCacheResolver<WithTypename<CreateNote>, Record<string, never>, Scalars['String'] | string>
  },
  CreateUserPayload?: {
    profile?: GraphCacheResolver<WithTypename<CreateUserPayload>, Record<string, never>, WithTypename<Profile> | string>,
    user?: GraphCacheResolver<WithTypename<CreateUserPayload>, Record<string, never>, WithTypename<User> | string>
  },
  Date?: {
    action?: GraphCacheResolver<WithTypename<Date>, Record<string, never>, Scalars['String'] | string>,
    type?: GraphCacheResolver<WithTypename<Date>, Record<string, never>, Scalars['String'] | string>,
    value?: GraphCacheResolver<WithTypename<Date>, Record<string, never>, Scalars['String'] | string>
  },
  Focus?: {
    actions?: GraphCacheResolver<WithTypename<Focus>, Record<string, never>, Array<WithTypename<Action> | string>>,
    beliefs?: GraphCacheResolver<WithTypename<Focus>, Record<string, never>, Array<WithTypename<Belief> | string>>,
    dates?: GraphCacheResolver<WithTypename<Focus>, Record<string, never>, Array<WithTypename<Date> | string>>,
    goals?: GraphCacheResolver<WithTypename<Focus>, Record<string, never>, Array<WithTypename<Goal> | string>>,
    locations?: GraphCacheResolver<WithTypename<Focus>, Record<string, never>, Array<WithTypename<Location> | string>>,
    preferences?: GraphCacheResolver<WithTypename<Focus>, Record<string, never>, Array<WithTypename<Preference> | string>>,
    vision?: GraphCacheResolver<WithTypename<Focus>, Record<string, never>, Scalars['String'] | string>
  },
  GetProfileOutput?: {
    fullName?: GraphCacheResolver<WithTypename<GetProfileOutput>, Record<string, never>, Scalars['String'] | string>,
    id?: GraphCacheResolver<WithTypename<GetProfileOutput>, Record<string, never>, Scalars['String'] | string>,
    userId?: GraphCacheResolver<WithTypename<GetProfileOutput>, Record<string, never>, Scalars['String'] | string>
  },
  Goal?: {
    goalId?: GraphCacheResolver<WithTypename<Goal>, Record<string, never>, Scalars['String'] | string>,
    priorityGrade?: GraphCacheResolver<WithTypename<Goal>, Record<string, never>, Scalars['Int'] | string>,
    sentiment?: GraphCacheResolver<WithTypename<Goal>, Record<string, never>, Scalars['String'] | string>,
    value?: GraphCacheResolver<WithTypename<Goal>, Record<string, never>, Scalars['String'] | string>
  },
  Location?: {
    country?: GraphCacheResolver<WithTypename<Location>, Record<string, never>, Scalars['String'] | string>,
    locationType?: GraphCacheResolver<WithTypename<Location>, Record<string, never>, Scalars['String'] | string>,
    type?: GraphCacheResolver<WithTypename<Location>, Record<string, never>, Scalars['String'] | string>,
    value?: GraphCacheResolver<WithTypename<Location>, Record<string, never>, Scalars['String'] | string>
  },
  Message?: {
    chatId?: GraphCacheResolver<WithTypename<Message>, Record<string, never>, Scalars['String'] | string>,
    createdAt?: GraphCacheResolver<WithTypename<Message>, Record<string, never>, Scalars['String'] | string>,
    id?: GraphCacheResolver<WithTypename<Message>, Record<string, never>, Scalars['String'] | string>,
    message?: GraphCacheResolver<WithTypename<Message>, Record<string, never>, Scalars['String'] | string>,
    profileId?: GraphCacheResolver<WithTypename<Message>, Record<string, never>, Scalars['String'] | string>,
    role?: GraphCacheResolver<WithTypename<Message>, Record<string, never>, MessageRole | string>
  },
  NoteOutput?: {
    content?: GraphCacheResolver<WithTypename<NoteOutput>, Record<string, never>, Scalars['String'] | string>,
    createdAt?: GraphCacheResolver<WithTypename<NoteOutput>, Record<string, never>, Scalars['String'] | string>,
    id?: GraphCacheResolver<WithTypename<NoteOutput>, Record<string, never>, Scalars['String'] | string>
  },
  Preference?: {
    sentiment?: GraphCacheResolver<WithTypename<Preference>, Record<string, never>, Scalars['String'] | string>,
    type?: GraphCacheResolver<WithTypename<Preference>, Record<string, never>, Scalars['String'] | string>,
    value?: GraphCacheResolver<WithTypename<Preference>, Record<string, never>, Scalars['String'] | string>
  },
  Profile?: {
    fullName?: GraphCacheResolver<WithTypename<Profile>, Record<string, never>, Scalars['String'] | string>,
    id?: GraphCacheResolver<WithTypename<Profile>, Record<string, never>, Scalars['Int'] | string>,
    userId?: GraphCacheResolver<WithTypename<Profile>, Record<string, never>, Scalars['String'] | string>
  },
  UpdateProfilePayload?: {
    profile?: GraphCacheResolver<WithTypename<UpdateProfilePayload>, Record<string, never>, WithTypename<Profile> | string>
  },
  UploadVoiceNoteResponse?: {
    error?: GraphCacheResolver<WithTypename<UploadVoiceNoteResponse>, Record<string, never>, Scalars['String'] | string>,
    text?: GraphCacheResolver<WithTypename<UploadVoiceNoteResponse>, Record<string, never>, Scalars['String'] | string>
  },
  User?: {
    email?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>,
    id?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  createNote?: GraphCacheOptimisticMutationResolver<MutationCreateNoteArgs, WithTypename<CreateNote>>,
  createUser?: GraphCacheOptimisticMutationResolver<MutationCreateUserArgs, WithTypename<CreateUserPayload>>,
  refreshToken?: GraphCacheOptimisticMutationResolver<MutationRefreshTokenArgs, WithTypename<AuthPayload>>,
  saveAppleUser?: GraphCacheOptimisticMutationResolver<MutationSaveAppleUserArgs, WithTypename<AuthPayload>>,
  sendChatMessage?: GraphCacheOptimisticMutationResolver<MutationSendChatMessageArgs, Array<WithTypename<Message>>>,
  signUpWithEmail?: GraphCacheOptimisticMutationResolver<MutationSignUpWithEmailArgs, WithTypename<CreateUserPayload>>,
  updateProfile?: GraphCacheOptimisticMutationResolver<MutationUpdateProfileArgs, WithTypename<UpdateProfilePayload>>,
  uploadVoiceNote?: GraphCacheOptimisticMutationResolver<MutationUploadVoiceNoteArgs, WithTypename<UploadVoiceNoteResponse>>
};

export type GraphCacheUpdaters = {
  Query?: {
    chatMessages?: GraphCacheUpdateResolver<{ chatMessages: Array<WithTypename<Message>> }, QueryChatMessagesArgs>,
    chats?: GraphCacheUpdateResolver<{ chats: Array<WithTypename<Chat>> }, Record<string, never>>,
    currentUser?: GraphCacheUpdateResolver<{ currentUser: WithTypename<User> }, Record<string, never>>,
    focus?: GraphCacheUpdateResolver<{ focus: WithTypename<Focus> }, Record<string, never>>,
    notes?: GraphCacheUpdateResolver<{ notes: Array<WithTypename<NoteOutput>> }, Record<string, never>>,
    profile?: GraphCacheUpdateResolver<{ profile: WithTypename<GetProfileOutput> }, Record<string, never>>
  },
  Mutation?: {
    createNote?: GraphCacheUpdateResolver<{ createNote: WithTypename<CreateNote> }, MutationCreateNoteArgs>,
    createUser?: GraphCacheUpdateResolver<{ createUser: WithTypename<CreateUserPayload> }, MutationCreateUserArgs>,
    refreshToken?: GraphCacheUpdateResolver<{ refreshToken: WithTypename<AuthPayload> }, MutationRefreshTokenArgs>,
    saveAppleUser?: GraphCacheUpdateResolver<{ saveAppleUser: WithTypename<AuthPayload> }, MutationSaveAppleUserArgs>,
    sendChatMessage?: GraphCacheUpdateResolver<{ sendChatMessage: Array<WithTypename<Message>> }, MutationSendChatMessageArgs>,
    signUpWithEmail?: GraphCacheUpdateResolver<{ signUpWithEmail: WithTypename<CreateUserPayload> }, MutationSignUpWithEmailArgs>,
    updateProfile?: GraphCacheUpdateResolver<{ updateProfile: WithTypename<UpdateProfilePayload> }, MutationUpdateProfileArgs>,
    uploadVoiceNote?: GraphCacheUpdateResolver<{ uploadVoiceNote: WithTypename<UploadVoiceNoteResponse> }, MutationUploadVoiceNoteArgs>
  },
  Subscription?: {},
  Action?: {
    goalId?: GraphCacheUpdateResolver<Maybe<WithTypename<Action>>, Record<string, never>>,
    metadata?: GraphCacheUpdateResolver<Maybe<WithTypename<Action>>, Record<string, never>>,
    sentiment?: GraphCacheUpdateResolver<Maybe<WithTypename<Action>>, Record<string, never>>,
    type?: GraphCacheUpdateResolver<Maybe<WithTypename<Action>>, Record<string, never>>,
    value?: GraphCacheUpdateResolver<Maybe<WithTypename<Action>>, Record<string, never>>
  },
  ActionMetadata?: {
    belief?: GraphCacheUpdateResolver<Maybe<WithTypename<ActionMetadata>>, Record<string, never>>,
    currentExpenses?: GraphCacheUpdateResolver<Maybe<WithTypename<ActionMetadata>>, Record<string, never>>,
    goalTimeframe?: GraphCacheUpdateResolver<Maybe<WithTypename<ActionMetadata>>, Record<string, never>>,
    location?: GraphCacheUpdateResolver<Maybe<WithTypename<ActionMetadata>>, Record<string, never>>,
    timeframe?: GraphCacheUpdateResolver<Maybe<WithTypename<ActionMetadata>>, Record<string, never>>
  },
  AuthPayload?: {
    accessToken?: GraphCacheUpdateResolver<Maybe<WithTypename<AuthPayload>>, Record<string, never>>,
    refreshToken?: GraphCacheUpdateResolver<Maybe<WithTypename<AuthPayload>>, Record<string, never>>,
    userId?: GraphCacheUpdateResolver<Maybe<WithTypename<AuthPayload>>, Record<string, never>>
  },
  Belief?: {
    sentiment?: GraphCacheUpdateResolver<Maybe<WithTypename<Belief>>, Record<string, never>>,
    type?: GraphCacheUpdateResolver<Maybe<WithTypename<Belief>>, Record<string, never>>,
    value?: GraphCacheUpdateResolver<Maybe<WithTypename<Belief>>, Record<string, never>>
  },
  Chat?: {
    createdAt?: GraphCacheUpdateResolver<Maybe<WithTypename<Chat>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Chat>>, Record<string, never>>,
    title?: GraphCacheUpdateResolver<Maybe<WithTypename<Chat>>, Record<string, never>>
  },
  CreateNote?: {
    content?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateNote>>, Record<string, never>>,
    createdAt?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateNote>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateNote>>, Record<string, never>>
  },
  CreateUserPayload?: {
    profile?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateUserPayload>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateUserPayload>>, Record<string, never>>
  },
  Date?: {
    action?: GraphCacheUpdateResolver<Maybe<WithTypename<Date>>, Record<string, never>>,
    type?: GraphCacheUpdateResolver<Maybe<WithTypename<Date>>, Record<string, never>>,
    value?: GraphCacheUpdateResolver<Maybe<WithTypename<Date>>, Record<string, never>>
  },
  Focus?: {
    actions?: GraphCacheUpdateResolver<Maybe<WithTypename<Focus>>, Record<string, never>>,
    beliefs?: GraphCacheUpdateResolver<Maybe<WithTypename<Focus>>, Record<string, never>>,
    dates?: GraphCacheUpdateResolver<Maybe<WithTypename<Focus>>, Record<string, never>>,
    goals?: GraphCacheUpdateResolver<Maybe<WithTypename<Focus>>, Record<string, never>>,
    locations?: GraphCacheUpdateResolver<Maybe<WithTypename<Focus>>, Record<string, never>>,
    preferences?: GraphCacheUpdateResolver<Maybe<WithTypename<Focus>>, Record<string, never>>,
    vision?: GraphCacheUpdateResolver<Maybe<WithTypename<Focus>>, Record<string, never>>
  },
  GetProfileOutput?: {
    fullName?: GraphCacheUpdateResolver<Maybe<WithTypename<GetProfileOutput>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<GetProfileOutput>>, Record<string, never>>,
    userId?: GraphCacheUpdateResolver<Maybe<WithTypename<GetProfileOutput>>, Record<string, never>>
  },
  Goal?: {
    goalId?: GraphCacheUpdateResolver<Maybe<WithTypename<Goal>>, Record<string, never>>,
    priorityGrade?: GraphCacheUpdateResolver<Maybe<WithTypename<Goal>>, Record<string, never>>,
    sentiment?: GraphCacheUpdateResolver<Maybe<WithTypename<Goal>>, Record<string, never>>,
    value?: GraphCacheUpdateResolver<Maybe<WithTypename<Goal>>, Record<string, never>>
  },
  Location?: {
    country?: GraphCacheUpdateResolver<Maybe<WithTypename<Location>>, Record<string, never>>,
    locationType?: GraphCacheUpdateResolver<Maybe<WithTypename<Location>>, Record<string, never>>,
    type?: GraphCacheUpdateResolver<Maybe<WithTypename<Location>>, Record<string, never>>,
    value?: GraphCacheUpdateResolver<Maybe<WithTypename<Location>>, Record<string, never>>
  },
  Message?: {
    chatId?: GraphCacheUpdateResolver<Maybe<WithTypename<Message>>, Record<string, never>>,
    createdAt?: GraphCacheUpdateResolver<Maybe<WithTypename<Message>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Message>>, Record<string, never>>,
    message?: GraphCacheUpdateResolver<Maybe<WithTypename<Message>>, Record<string, never>>,
    profileId?: GraphCacheUpdateResolver<Maybe<WithTypename<Message>>, Record<string, never>>,
    role?: GraphCacheUpdateResolver<Maybe<WithTypename<Message>>, Record<string, never>>
  },
  NoteOutput?: {
    content?: GraphCacheUpdateResolver<Maybe<WithTypename<NoteOutput>>, Record<string, never>>,
    createdAt?: GraphCacheUpdateResolver<Maybe<WithTypename<NoteOutput>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<NoteOutput>>, Record<string, never>>
  },
  Preference?: {
    sentiment?: GraphCacheUpdateResolver<Maybe<WithTypename<Preference>>, Record<string, never>>,
    type?: GraphCacheUpdateResolver<Maybe<WithTypename<Preference>>, Record<string, never>>,
    value?: GraphCacheUpdateResolver<Maybe<WithTypename<Preference>>, Record<string, never>>
  },
  Profile?: {
    fullName?: GraphCacheUpdateResolver<Maybe<WithTypename<Profile>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Profile>>, Record<string, never>>,
    userId?: GraphCacheUpdateResolver<Maybe<WithTypename<Profile>>, Record<string, never>>
  },
  UpdateProfilePayload?: {
    profile?: GraphCacheUpdateResolver<Maybe<WithTypename<UpdateProfilePayload>>, Record<string, never>>
  },
  UploadVoiceNoteResponse?: {
    error?: GraphCacheUpdateResolver<Maybe<WithTypename<UploadVoiceNoteResponse>>, Record<string, never>>,
    text?: GraphCacheUpdateResolver<Maybe<WithTypename<UploadVoiceNoteResponse>>, Record<string, never>>
  },
  User?: {
    email?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>
  },
};

export type GraphCacheConfig = Parameters<typeof cacheExchange>[0] & {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
};