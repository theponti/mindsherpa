/** THIS FILE IS AUTOGENERATED, DO NOT EDIT IT! */
import * as Types from '../../types';

import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type CreateUserMutationVariables = Types.Exact<{
  input: Types.CreateUserInput;
}>;


export type CreateUserMutation = { readonly __typename?: 'Mutation', readonly createUser: { readonly __typename?: 'CreateUserPayload', readonly user: { readonly __typename?: 'User', readonly id: string, readonly email: string | null }, readonly profile: { readonly __typename?: 'Profile', readonly id: number, readonly fullName: string | null, readonly userId: string } } };


export const CreateUserDocument = gql`
    mutation CreateUser($input: CreateUserInput!) {
  createUser(input: $input) {
    user {
      id
      email
    }
    profile {
      id
      fullName
      userId
    }
  }
}
    `;

export function useCreateUserMutation() {
  return Urql.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument);
};