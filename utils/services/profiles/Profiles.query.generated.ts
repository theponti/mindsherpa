/** THIS FILE IS AUTOGENERATED, DO NOT EDIT IT! */
import * as Types from '../../types';

import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type ProfileQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ProfileQuery = { readonly __typename?: 'Query', readonly profile: { readonly __typename?: 'GetProfileOutput', readonly id: string, readonly fullName: string, readonly userId: string } };


export const ProfileDocument = gql`
    query Profile {
  profile {
    id
    fullName
    userId
  }
}
    `;

export function useProfileQuery(options?: Omit<Urql.UseQueryArgs<ProfileQueryVariables>, 'query'>) {
  return Urql.useQuery<ProfileQuery, ProfileQueryVariables>({ query: ProfileDocument, ...options });
};