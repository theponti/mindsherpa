/** THIS FILE IS AUTOGENERATED, DO NOT EDIT IT! */
import * as Types from '../types';

import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type ChatsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ChatsQuery = { readonly __typename?: 'Query', readonly chats: ReadonlyArray<{ readonly __typename?: 'Chat', readonly id: string, readonly title: string, readonly createdAt: string }> };


export const ChatsDocument = gql`
    query Chats {
  chats {
    id
    title
    createdAt
  }
}
    `;

export function useChatsQuery(options?: Omit<Urql.UseQueryArgs<ChatsQueryVariables>, 'query'>) {
  return Urql.useQuery<ChatsQuery, ChatsQueryVariables>({ query: ChatsDocument, ...options });
};