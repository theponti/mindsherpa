/** THIS FILE IS AUTOGENERATED, DO NOT EDIT IT! */
import * as Types from '../types';

import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type ChatMessagesQueryVariables = Types.Exact<{
  chatId: Types.Scalars['String']['input'];
}>;


export type ChatMessagesQuery = { readonly __typename?: 'Query', readonly chatMessages: ReadonlyArray<{ readonly __typename?: 'Message', readonly id: string, readonly message: string, readonly role: Types.MessageRole, readonly chatId: string, readonly profileId: string, readonly createdAt: string }> };


export const ChatMessagesDocument = gql`
    query ChatMessages($chatId: String!) {
  chatMessages(chatId: $chatId) {
    id
    message
    role
    chatId
    profileId
    createdAt
  }
}
    `;

export function useChatMessagesQuery(options: Omit<Urql.UseQueryArgs<ChatMessagesQueryVariables>, 'query'>) {
  return Urql.useQuery<ChatMessagesQuery, ChatMessagesQueryVariables>({ query: ChatMessagesDocument, ...options });
};